{"version":3,"sources":["ProductListing.js","SingleProductDetails.js","App.js","serviceWorker.js","index.js"],"names":["ProductListing","PRODUCT_QUERY","gql","useQuery","loading","error","data","site","products","edges","map","product","key","node","entityId","to","pathname","name","SingleProductDetails","props","SINGLE_PRODUCT_QUERY","id","console","log","className","style","marginTop","aria-label","class","aria-current","src","images","url320wide","brand","prices","price","value","dangerouslySetInnerHTML","__html","description","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","process","client","ApolloClient","link","concat","cache","InMemoryCache","App","basename","ApolloProvider","exact","path","render","match","params","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"0xBAIe,SAASA,IACtB,IAAMC,EAAgBC,YAAH,KADoB,EA2BNC,YAASF,GAAlCG,EA3B+B,EA2B/BA,QAASC,EA3BsB,EA2BtBA,MAAOC,EA3Be,EA2BfA,KAExB,OAAIF,EAAgB,yCAChBC,EAAc,sCAEXC,EAAKC,KAAKC,SAASC,MAAMC,KAAI,SAACC,GAAD,OAClC,wBAAIC,IAAKD,EAAQE,KAAKC,UACpB,4BACE,kBAAC,IAAD,CAAMC,GAAI,CAAEC,SAAS,WAAD,OAAaL,EAAQE,KAAKC,YAC3CH,EAAQE,KAAKI,W,qlBCpCT,SAASC,EAAqBC,GAC3C,IAAMC,EAAuBlB,YAAH,IAGJiB,EAAME,IA6B5BC,QAAQC,IAAIJ,GAjCsC,MAkCjBhB,YAASiB,GAAlChB,EAlC0C,EAkC1CA,QAASC,EAlCiC,EAkCjCA,MAAOC,EAlC0B,EAkC1BA,KAExB,OAAIF,EAAgB,yCAChBC,EAAc,sCAGhB,yBAAKmB,UAAU,YAAYC,MAAO,CAAEC,UAAW,QAC7C,yBAAKF,UAAU,OACb,yBAAKG,aAAW,cACd,wBAAIC,MAAM,cACR,wBAAIA,MAAM,yBAAyBC,eAAa,QAC9C,kBAAC,IAAD,CAAML,UAAW,kBAAmBT,GAAG,KAAvC,YAOR,yBAAKS,UAAU,OACb,yBAAKA,UAAU,OACb,yBAAKM,IAAKxB,EAAKC,KAAKI,QAAQoB,OAAOtB,MAAM,GAAGI,KAAKmB,cAEnD,yBAAKR,UAAU,SACb,4BAAKlB,EAAKC,KAAKI,QAAQM,MACvB,4BAAKX,EAAKC,KAAKI,QAAQsB,MAAMhB,MAC7B,+BAAKX,EAAKC,KAAKI,QAAQuB,OAAOC,MAAMC,SAGxC,6BACA,yBAAKZ,UAAU,OACb,yBACEA,UAAU,MACVa,wBAAyB,CAAEC,OAAQhC,EAAKC,KAAKI,QAAQ4B,iBC1D/D,IAAMC,EAAWC,YAAe,CAC9BC,IAAK,0DAGDC,EAAWC,aAAW,SAACC,EAAD,GAAqB,IAAfC,EAAc,EAAdA,QAIhC,MAAO,CACLA,QAAQ,2BACHA,GADE,IAELC,cAAc,UAAD,OAAYC,4WAKzBC,EAAS,IAAIC,IAAa,CAC9BC,KAAMR,EAASS,OAAOZ,GACtBa,MAAO,IAAIC,MAyBEC,MAtBf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAS,sBACf,kBAACC,EAAA,EAAD,CAAgBR,OAAQA,GACtB,yBAAKzB,UAAU,OACb,+DACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,kBAAC5D,EAAD,SACpC,kBAAC,IAAD,CACE0D,OAAK,EACLC,KAAK,eACLC,OAAQ,gBAAGC,EAAH,EAAGA,MAAH,OACN,kBAAC3C,EAAD,CAAsBG,GAAIwC,EAAMC,OAAOzC,aCjCnC0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASL,MACvB,2DCZNM,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAxE,GACLiB,QAAQjB,MAAMA,EAAMyE,a","file":"static/js/main.a2a90c21.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function ProductListing() {\r\n  const PRODUCT_QUERY = gql`\r\n    query paginateProducts {\r\n      site {\r\n        products {\r\n          pageInfo {\r\n            startCursor\r\n            endCursor\r\n          }\r\n          edges {\r\n            cursor\r\n            node {\r\n              entityId\r\n              name\r\n              prices {\r\n                price {\r\n                  value\r\n                  currencyCode\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  `;\r\n\r\n  const { loading, error, data } = useQuery(PRODUCT_QUERY);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :</p>;\r\n\r\n  return data.site.products.edges.map((product) => (\r\n    <ul key={product.node.entityId}>\r\n      <li>\r\n        <Link to={{ pathname: `product/${product.node.entityId}` }}>\r\n          {product.node.name}\r\n        </Link>\r\n      </li>\r\n    </ul>\r\n  ));\r\n}\r\n","import React from \"react\";\r\nimport { useQuery, gql } from \"@apollo/client\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function SingleProductDetails(props) {\r\n  const SINGLE_PRODUCT_QUERY = gql`\r\n  query SingleProduct {\r\nsite {\r\n    product(entityId: ${props.id}) {\r\n      id\r\n      entityId\r\n      name\r\n      description\r\n            brand {\r\n        name\r\n      }\r\n      prices {\r\n        price {\r\n          value\r\n          currencyCode\r\n        }\r\n      }\r\n       images {\r\n        edges {\r\n          node {\r\n            url320wide: url(width: 320)\r\n            url640wide: url(width: 640)\r\n            url960wide: url(width: 960)\r\n            url1280wide: url(width: 1280)\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n  `;\r\n\r\n  console.log(props);\r\n  const { loading, error, data } = useQuery(SINGLE_PRODUCT_QUERY);\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error :</p>;\r\n\r\n  return (\r\n    <div className=\"container\" style={{ marginTop: \"10%\" }}>\r\n      <div className=\"row\">\r\n        <nav aria-label=\"breadcrumb\">\r\n          <ol class=\"breadcrumb\">\r\n            <li class=\"breadcrumb-item active\" aria-current=\"page\">\r\n              <Link className={\"breadcrumb-link\"} to=\"/\">\r\n                Home\r\n              </Link>\r\n            </li>\r\n          </ol>\r\n        </nav>\r\n      </div>\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <img src={data.site.product.images.edges[0].node.url320wide} />\r\n        </div>\r\n        <div className=\"col-7\">\r\n          <h1>{data.site.product.name}</h1>\r\n          <h2>{data.site.product.brand.name}</h2>\r\n          <p>${data.site.product.prices.price.value}</p>\r\n        </div>\r\n      </div>\r\n      <hr></hr>\r\n      <div className=\"row\">\r\n        <div\r\n          className=\"col\"\r\n          dangerouslySetInnerHTML={{ __html: data.site.product.description }}\r\n        ></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport { ApolloClient, createHttpLink, InMemoryCache } from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\nimport { ApolloProvider } from \"@apollo/client\";\n\nimport ProductListing from \"./ProductListing\";\nimport SingleProductDetails from \"./SingleProductDetails\";\n\nconst httpLink = createHttpLink({\n  uri: \"https://bigcommerce-mmurphy.mybigcommerce.com/graphql\",\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      authorization: `Bearer ${process.env.REACT_APP_BIGCOMMERCE_TOKEN}`,\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <Router basename=\"/bigcommerce-store\">\n      <ApolloProvider client={client}>\n        <div className=\"App\">\n          <h1>Mark Murphy's BigCommerce Store</h1>\n          <Switch>\n            <Route exact path=\"/\" render={() => <ProductListing />} />\n            <Route\n              exact\n              path=\"/product/:id\"\n              render={({ match }) => (\n                <SingleProductDetails id={match.params.id} />\n              )}\n            />\n          </Switch>\n        </div>\n      </ApolloProvider>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}